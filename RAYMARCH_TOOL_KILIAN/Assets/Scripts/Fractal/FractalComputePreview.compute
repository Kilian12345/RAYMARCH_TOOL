#pragma kernel CSMain
     

RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _Light;

float power;
float darkness;
float blackAndWhite;
float3 colourAMix;
float3 colourBMix;


float _XRotation;
float _ZRotation;

float FractalVisibility;
int FractalType;

static const float epsilon = 0.001f;
static const float maxDst = 200;
static const int maxStepCount = 250;


float2x2 op_rotate(float a) {
    float s = sin(a);
    float c = cos(a);
    return float2x2(c, -s, s, c);
}


struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float SphereDistance(float3 eye, float3 centre, float radius) {
    return distance(eye, centre) - radius;
}

float PrismDistance(float3 eye, float3 centre, float2 h) {
    float3 q = abs(eye - centre);
    return max(q.z - h.y, max(q.x * 0.866025 + eye.y * 0.5, -eye.y) - h.x * 0.5);
}

float CubeDistance(float3 eye, float3 centre, float3 size) {
    float3 o = abs(eye - centre) - size;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

float Mandlebulb(float3 eye, float3 centre, float2 rot)
{
    float3 size = float3(0,0,0);
    float3 z = eye;
    z += centre;
    z.xz = mul(z.xz, op_rotate(rot.x));///////// ROTATION
    z.yz = mul(z.yz, op_rotate(rot.y));
    float dr = 1.0;
    float r = 0.0;
    int iterations = 0;

    for (int i = 0; i < 20; i++) {
        iterations = i;
        r = length(z);

        if (r > 2) {
            break;
        }


        // convert to polar coordinates
        float theta = acos((z.z) / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, power - 1.0) * power * dr + 1.0;

        // scale and rotate the point
        float zr = pow(r, power);
        theta = theta * power;
        phi = phi * power;

        // convert back to cartesian coordinates
        z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
        z += eye;
        z += centre;
        z.xz = mul(z.xz, op_rotate(rot.x));///////// ROTATION
        z.yz = mul(z.yz, op_rotate(rot.y));
    }
    float dst = 0.5 * log(r) * r / dr;
    return dst * FractalVisibility;
}

float TetrahedralSierpinski(float3 eye, float3 centre, float2 rot)
{
    float3 size = float3(2,2,2);
    float3 a1 = float3(1, 1, 1);
    float3 a2 = float3(-1, -1, 1);
    float3 a3 = float3(1, -1, -1);
    float3 a4 = float3(-1, 1, -1);
    float3 c;

    float3 z = eye;
    z += centre;
    z.xz = mul(z.xz, op_rotate(rot.x)); ///////// ROTATION
    z.yz = mul(z.yz, op_rotate(rot.y));
    int n = 0;
    float dist, d;
    float iterations = 20;

    while (n < iterations)
    {
        c = a1; dist = length(z - a1);
        d = length(z - a2); if (d < dist) { c = a2; dist = d; }
        d = length(z - a3); if (d < dist) { c = a3; dist = d; }
        d = length(z - a4); if (d < dist) { c = a4; dist = d; }
        z = size * z - c * (size - 1.0);
        n++;
    }

    return length(z) * pow(size, float(-n));
}

float Combine(float dstA, float dstB) {
    float dst = dstA;

    if (dstB < dstA)
    {
        dst = dstB;
    }


    return dst;
}

float FractalTypeDst(int FType, float3 eye, float3 centre, float2 rot)
{
    switch (FType)
    {
        case 0:
            return Mandlebulb(eye, centre, rot);
            break;
        case 1:
            return TetrahedralSierpinski (eye, centre, rot);
            break;
        case 2:
            return Mandlebulb(eye, centre, rot);
            break;
        case 3:
            return TetrahedralSierpinski(eye, centre, rot);
            break;
        case 4:
            return Mandlebulb(eye, centre, rot);
            break;
        default:
            return TetrahedralSierpinski(eye, centre, rot);
            break;
    }
}


float2 SceneInfo(float3 position) {

    float2 rotation = float2(_XRotation, _ZRotation);

    float Dst = FractalTypeDst(FractalType, position, float3(0, 0, 0), rotation);

    //Dst = TetrahedralSierpinski(position, float3(0, 0, 0), rotation);

    return float2(7, Dst);
}


float3 EstimateNormal(float3 p) {
    float x = SceneInfo(float3(p.x + epsilon, p.y, p.z)).y - SceneInfo(float3(p.x - epsilon, p.y, p.z)).y;
    float y = SceneInfo(float3(p.x, p.y + epsilon, p.z)).y - SceneInfo(float3(p.x, p.y - epsilon, p.z)).y;
    float z = SceneInfo(float3(p.x, p.y, p.z + epsilon)).y - SceneInfo(float3(p.x, p.y, p.z - epsilon)).y;
    return normalize(float3(x, y, z));
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    float2 uv = id.xy / float2(width, height);

    // Background gradient
    float4 result = lerp(float4(51, 3, 20, 1), float4(16, 6, 28, 1), uv.x) / 255.0;

    // Raymarching:
    Ray ray = CreateCameraRay(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0;

    while (rayDst < maxDst && marchSteps < maxStepCount) {
        marchSteps++;
        float2 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.y;

        // Ray has hit a surface
        if (dst <= epsilon) {
            float escapeIterations = sceneInfo.x;
            float3 normal = EstimateNormal(ray.origin - ray.direction * epsilon * 2);

            float colourA = saturate(dot(normal * .5 + .5, -_Light));
            float colourB = saturate(escapeIterations / 16.0);
            float3 colourMix = saturate(colourA * colourAMix + colourB * colourBMix);

            result = float4(colourMix.xyz, 0);
            break;
        }


        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

    float rim = marchSteps / darkness;
    Destination[id.xy] = lerp(result, 1, blackAndWhite) * rim;
}
